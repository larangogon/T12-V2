<?php

namespace Tests\Feature\Policies;

use App\Constants\Admins;
use App\Constants\Permissions;
use App\Models\Admin\Admin;
use App\Models\Color;
use App\Models\Product;
use App\Models\Size;
use App\Models\Stock;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Spatie\Permission\Models\Role;
use Database\Seeders\TestDatabaseSeeder;
use Tests\TestCase;

class StocksPolicyTest extends TestCase
{
    use RefreshDatabase;

    private $admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed([
            TestDatabaseSeeder::class,
        ]);
        $this->admin = factory(Admin::class)->create();
    }

    public function testAdminWithoutPermissionCannotUpdateStocks(): void
    {
        $id = factory(Stock::class)->create()->id;
        $response = $this->actingAs($this->admin, Admins::GUARDED)
            ->put(route('stocks.update', $id), [
                'quantity'      => 1,
            ]);

        $response->assertStatus(403);
    }

    public function testAdminWithoutPermissionCannotDeleteAStock(): void
    {
        $id = factory(Stock::class)->create()->id;
        $response = $this->actingAs($this->admin, Admins::GUARDED)
            ->delete(route('stocks.destroy', $id));

        $response->assertStatus(403);
    }

    public function testAdminWithoutPermissionCannotCreateStocks(): void
    {
        $response = $this->actingAs($this->admin, Admins::GUARDED)
            ->post(route('stocks.store'), [
                'product_id'    => Product::all()->random()->id,
                'color_id'      => Color::all()->random()->id,
                'size_id'      => Size::all()->random()->id,
                'quantity'      => 1,
            ]);

        $response->assertStatus(403);
    }

    public function testAllStocksRoutesWithPermissions(): void
    {
        $id = factory(Stock::class)->create()->id;
        $role = factory(Role::class)->create();

        $role->syncPermissions([
            Permissions::VIEW_STOCKS,
            Permissions::CREATE_STOCKS,
            Permissions::EDIT_STOCKS,
            Permissions::DELETE_STOCKS,
        ]);

        $this->admin->assignRole($role->name);

        $this->actingAs($this->admin, Admins::GUARDED)
            ->put(route('stocks.update', $id), [
                'quantity' => 1,
            ])->assertStatus(302);

        $this->actingAs($this->admin, Admins::GUARDED)->post(route('stocks.store', $id), [
            'product_id'    => Product::all()->random()->id,
            'color_id'      => Color::all()->random()->id,
            'size_id'      => Size::all()->random()->id,
            'quantity'      => 1,
        ])->assertStatus(302);

        $this->actingAs($this->admin, Admins::GUARDED)
            ->delete(route('stocks.destroy', $id))->assertStatus(302);
    }
}
