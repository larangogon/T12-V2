<?php

namespace Tests\Feature\Commands;

use Database\Seeders\TestDatabaseSeeder;
use Tests\TestCase;

class CommandAdminCreateTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed([
            TestDatabaseSeeder::class
        ]);
    }

    /**
     * Test to command admin:create
     *
     * @return void
     */
    public function testAdminCreateCommand()
    {
        $this->artisan('admin:create')
            ->expectsQuestion(trans('users.create_admin.name'), 'Admin')
            ->expectsQuestion(trans('users.create_admin.email'), 'admin@gmail.com')
            ->expectsQuestion(trans('users.create_admin.password'), '1234')
            ->expectsQuestion(trans('users.create_admin.repeat_pass'), '1234')
            ->expectsOutput(trans('users.create_admin.ok'))
            ->assertExitCode(0);

        $this->assertDatabaseHas('admins', [
            'name' => 'Admin',
            'email' => 'admin@gmail.com'
        ]);
    }

    /**
     * Test to command admin:create fail email
     *
     * @return void
     */
    public function testEmailInvalidOnAdminCreateCommand()
    {
        $this->artisan('admin:create')
            ->expectsQuestion(trans('users.create_admin.name'), 'Admin')
            ->expectsQuestion(trans('users.create_admin.email'), 'adminGmail.com')
            ->expectsOutput(trans('users.create_admin.email_invalid'))
            ->assertExitCode(0);

        $this->assertDatabaseMissing('admins', [
            'name'  => 'Admin',
            'email' => 'adminGmail.com'
        ]);
    }

    /**
     * Test to command admin:create fail passwords validation
     *
     * @return void
     */
    public function testPassConfirmInvalidOnAdminCreateCommand()
    {
        $this->artisan('admin:create')
            ->expectsQuestion(trans('users.create_admin.name'), 'Admin')
            ->expectsQuestion(trans('users.create_admin.email'), 'admin@gmail.com')
            ->expectsQuestion(trans('users.create_admin.password'), '1234')
            ->expectsQuestion(trans('users.create_admin.repeat_pass'), '123')
            ->expectsOutput(trans('users.create_admin.pass_failed'))
            ->assertExitCode(0);

        $this->assertDatabaseMissing('admins', [
            'name'  => 'Admin',
            'email' => 'adminGmail.com'
        ]);
    }
}
