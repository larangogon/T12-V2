<?php

namespace Tests\Feature\Http\Controllers\Web;

use App\Models\Cart;
use App\Models\Order;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Database\Seeders\TestDatabaseSeeder;
use Tests\TestCase;

class UserPoliciesTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed([
            TestDatabaseSeeder::class,
        ]);
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testAnUserConnotViewOtherProfile(): void
    {
        $user = factory(User::class)->create([
            'email_verified_at' => now(),
        ]);
        $user2 = factory(User::class)->create([
            'email_verified_at' => now(),
        ]);
        factory(Cart::class)->create([
            'user_id' => $user->id,
        ]);
        $response = $this->actingAs($user)->get(route('user.profile', $user2->id));

        $response->assertStatus(403);
    }

    public function testUserCannotViewOtherOrdersList(): void
    {
        $user = factory(User::class)->create([
            'email_verified_at' => now(),
        ]);
        $user2 = factory(User::class)->create([
            'email_verified_at' => now(),
        ]);
        factory(Cart::class)->create([
            'user_id' => $user->id,
        ]);
        factory(Cart::class)->create([
            'user_id' => $user2->id,
        ]);

        $response = $this->actingAs($user)->get(route('user.orders.index', $user2->id));

        $response->assertStatus(403);
    }

    public function testUserCannotViewOtherOrder(): void
    {
        $user = factory(User::class)->create([
            'email_verified_at' => now(),
        ]);
        $user2 = factory(User::class)->create([
            'email_verified_at' => now(),
        ]);
        factory(Cart::class)->create([
            'user_id' => $user->id,
        ]);

        $orderUser2 = factory(Order::class)->create([
            'user_id' => $user2->id,
        ]);

        $response = $this->actingAs($user)->get(route('user.order.show', [$user->id, $orderUser2->id]));

        $response->assertStatus(403);
    }
}
