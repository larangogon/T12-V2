<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Constants\Roles;
use App\Models\Admin\Admin;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Database\Seeders\PermissionSeeder;
use Database\Seeders\RoleSeeder;
use Spatie\Permission\Models\Permission;
use Tests\TestCase;

class PermissionControllerTest extends TestCase
{
    use RefreshDatabase;

    protected $admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seed([
            PermissionSeeder::class,
            RoleSeeder::class,
        ]);

        $this->admin = factory(Admin::class)->create();
        $this->admin->assignRole(Roles::ADMIN);
    }

    public function testStore(): void
    {
        $response = $this->actingAs($this->admin, 'admin')->post(route('permissions.store'), [
            'name' => 'new Permission',
            'guard_name'   => 'admin',
        ]);

        $response
            ->assertStatus(302)
            ->assertRedirect(route('roles.index'))
            ->assertSessionHas('success')
            ->assertSessionDoesntHaveErrors();

        $this->assertDatabaseHas('permissions', [
            'name' => 'new Permission',
        ]);
    }

    public function testUpdate(): void
    {
        $permission = Permission::create([
            'name' => 'new Permission',
            'guard_name' => 'admin',
        ]);
        $response = $this->actingAs($this->admin, 'admin')->put(route('permissions.update', $permission->id), [
            'name' => 'new Permission updated',
        ]);

        $response
            ->assertStatus(302)
            ->assertRedirect(route('roles.index'))
            ->assertSessionHas('success')
            ->assertSessionDoesntHaveErrors();

        $this->assertDatabaseHas('permissions', [
            'id' => $permission->id,
            'name' => 'new Permission updated',
        ]);
    }

    public function testDestroy(): void
    {
        $permission = Permission::create([
            'name' => 'new Permission',
            'guard_name' => 'admin',
        ]);
        $response = $this->actingAs($this->admin, 'admin')->delete(route('permissions.destroy', $permission->id));

        $response
            ->assertStatus(302)
            ->assertRedirect(route('roles.index'))
            ->assertSessionHas('success')
            ->assertSessionDoesntHaveErrors();

        $this->assertDatabaseMissing('permissions', [
            'id' => $permission->id,
            'name' => 'new Permission',
        ]);
    }
}
