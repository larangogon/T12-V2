<?php

namespace Tests\Feature\Http\Controllers\Admin;

use App\Constants\Roles;
use App\Models\Admin\Admin;
use App\Models\Color;
use App\Models\Product;
use App\Models\Size;
use App\Models\Stock;
use Database\Seeders\TestDatabaseSeeder;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class StockControllerTest extends TestCase
{
    use RefreshDatabase;
    use DatabaseMigrations;

    private Admin $admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed([
            TestDatabaseSeeder::class,
        ]);
        $this->admin = factory(Admin::class)->create();
        $this->admin->assignRole(Roles::ADMIN);
    }

    public function testStore(): void
    {
        $response = $this->actingAs($this->admin, 'admin')->post(route('stocks.store'), [
            'product_id'    => $product_id = Product::all()->random()->id,
            'color_id'      => $color_id = Color::all()->random()->id,
            'size_id'      => $size_id = Size::all()->random()->id,
            'quantity'      => 3,
        ]);

        $response
                ->assertStatus(302);
        $this->assertDatabaseHas(
            'stocks',
            [
            'product_id' => $product_id,
            'color_id' => $color_id,
            'size_id' => $size_id,
            ]
        );

        $this->assertDatabaseHas(
            'products',
            [
            'stock' => 3,
            ]
        );
    }

    public function testUpdate(): void
    {
        $stock = factory(Stock::class)->create([
            'quantity' => 5,
        ]);

        $response = $this->actingAs($this->admin, 'admin')->put(route('stocks.update', $stock->id), [
            'quantity' => 0,
        ]);

        $response
                ->assertStatus(302);
        $this->assertDatabaseHas(
            'stocks',
            [
                'id' => $stock->id,
                'quantity' => 0,
            ]
        );

        $this->assertDatabaseHas(
            'products',
            [
                'id' => $stock->product_id,
                'stock' => 0,
                'is_active' => 0,
            ]
        );
    }

    public function testDestroy(): void
    {
        $stock = factory(Stock::class)->create([
            'quantity' => 5,
        ]);

        $response = $this->actingAs($this->admin, 'admin')->delete(route('stocks.destroy', $stock));

        $response
                ->assertStatus(302);
        $this->assertDatabaseMissing(
            'stocks',
            [
                'id' => $stock->id,
                'product_id' => $stock->product_id,
                'quantity' => 5,
            ]
        );

        $this->assertDatabaseHas(
            'products',
            [
                'id' => $stock->product_id,
                'stock' => 0,
                'is_active' => 0,
            ]
        );
    }

    public function testAddStocksRepeated(): void
    {
        $product_id = Product::all()->random()->id;
        $color_id = Color::all()->random()->id;
        $size_id = Size::all()->random()->id;
        factory(Stock::class)->create([
                'product_id' => $product_id,
                'color_id' => $color_id,
                'size_id' => $size_id,
                'quantity' => 3,
            ]);

        $response = $this->actingAs($this->admin, 'admin')->post(route('stocks.store'), [
            'product_id' => $product_id,
            'color_id' => $color_id,
            'size_id' => $size_id,
            'quantity' => 3,
        ]);

        $response
            ->assertStatus(302);
        $this->assertDatabaseHas(
            'stocks',
            [
                'product_id' => $product_id,
                'color_id' => $color_id,
                'size_id' => $size_id,
                'quantity' => 6,
            ]
        );

        $this->assertDatabaseHas(
            'products',
            [
                'stock' => 6,
            ]
        );
    }
}
