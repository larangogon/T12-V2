<?php

namespace Tests\Feature\Http\Controllers\Admin;

use Database\Seeders\TestDatabaseSeeder;
use Database\Seeders\UserSeeder;
use Database\Seeders\StockSeeder;
use App\Models\Order;
use App\Constants\Roles;
use App\Constants\Admins;
use App\Constants\Payers;
use App\Models\OrderDetail;
use App\Models\Admin\Admin;
use App\Constants\Payments;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class PaymentsControllerTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    private Admin $admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed([
            TestDatabaseSeeder::class,
            UserSeeder::class,
            StockSeeder::class,
        ]);
        factory(Order::class, 2)->create();
        factory(OrderDetail::class, 5)->create();
        $this->admin = factory(Admin::class)->create();
        $this->admin->assignRole(Roles::ADMIN);
        $this->withoutExceptionHandling();
    }

    public function testAnAdminCanCreatePayments(): void
    {
        $order = Order::all()->random();

        $response = $this->actingAs($this->admin, Admins::GUARDED)
            ->post(route('payments.store'), [
                'order_id'     => $order->id,
                'method'       => Payments::METHOD_CASH,
                'document_type' => Payers::DOCUMENT_TYPE_CC,
                'document'     => '10000000',
                'name'         => 'testName',
                'last_name'    => 'testLastName',
                'email'        => 'testEmail@example.com',
                'phone'        => '3100000000',
                'amount'       => (float)$order->amount
            ]);

        $response
            ->assertStatus(302);

        $this->assertDatabaseHas('payments', [
            'order_id' => $order->id,
        ]);

        $this->assertDatabaseHas('payers', [
            'document_type' => Payers::DOCUMENT_TYPE_CC,
            'document'     => 10000000,
            'name'         => 'testName',
            'last_name'    => 'testLastName',
            'email'        => 'testEmail@example.com',
            'phone'        => '3100000000'
        ]);
    }
}
