<?php

namespace Tests\Feature\Http\Controllers\Api;

use App\Constants\Roles;
use App\Models\Admin\Admin;
use App\Models\Photo;
use App\Models\Product;
use App\Constants\ImageBase64;
use Database\Seeders\TestDatabaseSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ApiPhotosControllerTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    private Admin $admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seed([
            TestDatabaseSeeder::class,
        ]);

        $this->admin = factory(Admin::class)->create();
        $this->admin->assignRole(Roles::ADMIN);
    }

    public function testAnAdminAuthenticatedCanStorePhotos(): void
    {
        $product = factory(Product::class)->create();

        $response = $this->postJson(route('api.photos.store'), [
            'api_token'  => $this->admin->api_token,
            'product_id' => $product->id,
            'photos'     => [ImageBase64::IMAGE64],
        ]);

        $response
            ->assertStatus(200)
            ->assertJsonFragment([
                'status' => [
                    'status' => 'OK',
                    'message' => trans('messages.crud', [
                        'resource' => trans('fields.images'),
                        'status' => trans('fields.created')
                    ]),
                    'code'    => 200,
                ],
            ]);
    }

    public function testAnAdminAuthenticatedCanDeleteAPhoto(): void
    {
        $product = Product::all()->random();

        $photo = factory(Photo::class)->create([
            'product_id' => $product->id,
        ]);

        $response = $this->deleteJson(route('api.photos.destroy'), [
            'api_token'  => $this->admin->api_token,
            'photos' => [
                $photo->id,
            ],
        ]);

        $response
            ->assertStatus(200)
            ->assertJsonFragment([
                'status' => [
                    'status' => 'OK',
                    'message' => trans('messages.crud', [
                        'resource' => trans('fields.images'),
                        'status' => trans('fields.deleted')
                    ]),
                    'code'    => 200,
                ],
            ]);

        $this->assertDatabaseMissing('photos', [
            'id' => $photo->id,
            'product_id' => $photo->product_id,
            'name' => $photo->name,
        ]);
    }
}
