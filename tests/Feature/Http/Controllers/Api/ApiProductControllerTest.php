<?php

namespace Tests\Feature\Http\Controllers\Api;

use App\Constants\Roles;
use App\Models\Admin\Admin;
use App\Models\Category;
use App\Models\Color;
use App\Models\Product;
use App\Models\Size;
use App\Constants\ImageBase64;
use Database\Seeders\TestDatabaseSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ApiProductControllerTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    private Admin $admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seed([
            TestDatabaseSeeder::class,
        ]);

        $this->admin = factory(Admin::class)->create();
        $this->admin->assignRole(Roles::ADMIN);
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testAnyUserCanViewProductsList(): void
    {
        $response = $this->json('GET', route('api.index'));

        $response->assertJson(Product::all()->toArray());
    }

    public function testAnyUserCanViewAProduct(): void
    {
        $product = factory(Product::class)->create();

        $response = $this->json('GET', route('api.show', [
            'product' => $product->id,
        ]));

        $response
            ->assertStatus(200)
            ->assertJsonFragment([
            'status' => [
                'status' => 'OK',
                'message' => trans('messages.found', ['search' => $product->name]),
                'code'    => 200,
            ],
        ]);
    }

    public function testAnAdminAuthenticatedCanCreateAProduct(): void
    {
        $category = Category::all()->random()->id;
        $size1 = Size::all()->random();
        $color1 = Color::all()->random()->name;
        $size2 = Size::all()->random();
        $color2 = Color::all()->random()->name;

        $response = $this->postJson(route('api.products.store'), [
            'api_token'     => $this->admin->api_token,
            'id_category'   => $category,
            'reference'     => 1111,
            'name'          => 'new product',
            'description'   => 'This product is amazing and great for you',
            'tags'          => ['Hombre'],
            'cost'          => 25000,
            'price'         => 40000,
            'stocks'        => [
                0 => [
                    'color' => $color1,
                    'size'  => [
                        'type' => $size1->type->name,
                        'size' => $size1->name,
                    ],
                    'quantity' => 1,
                ],
                1 => [
                    'color' => $color2,
                    'size'  => [
                        'type' => $size2->type->name,
                        'size' => $size2->name,
                    ],
                    'quantity' => 5,
                ],
            ],
            'photos' => [
                ImageBase64::IMAGE64,
            ],
        ]);

        $response
            ->assertStatus(200)
            ->assertJson([
                'status' => [
                    'status' => 'OK',
                    'message' => trans('messages.crud', [
                        'resource' => trans_choice('products.product', 1, ['product_count' => '']),
                        'status' => trans('fields.created')
                    ]),
                ],
                'product' => [
                    'id_category'   => $category,
                    'reference'     =>  1111,
                    'name'          => 'new product',
                    'description'   => 'This product is amazing and great for you',
                ],
            ]);

        $this->assertDatabaseHas('products', [
            'reference'     =>  1111,
            'name'          => 'new product',
            'description'   => 'This product is amazing and great for you',
        ]);
    }

    public function testAnAdminAuthenticatedCanUpdateAProduct(): void
    {
        $product = Product::all()->random();

        $category = Category::all()->random()->id;

        $response = $this->putJson(route('api.products.update', $product->id), [
            'api_token'     => $this->admin->api_token,
            'id_category'   => $category,
            'reference'     =>  1111,
            'name'          => 'Update product',
            'description'   => 'This product is amazing and great for you, but were updated',
            'tags'          => ['Mujer'],
            'cost'          => 25000,
            'price'         => 40000,
        ]);

        $response
            ->assertStatus(200)
            ->assertJson([
                'status' => [
                    'status' => 'OK',
                    'message' => trans('messages.crud', [
                        'resource' => trans_choice('products.product', 1, ['product_count' => '']),
                        'status' => trans('fields.updated')
                    ]),
                ],
                'product' => [
                    'id_category'   => $category,
                    'reference'     =>  1111,
                    'name'          => 'Update product',
                    'description'   => 'This product is amazing and great for you, but were updated',
                ],
            ]);

        $this->assertDatabaseHas('products', [
            'id_category'   => $category,
            'reference'     =>  1111,
            'name'          => 'Update product',
            'description'   => 'This product is amazing and great for you, but were updated',
        ]);
    }

    public function testAnAdminAuthenticatedCanRemoveAProduct(): void
    {
        $product = Product::all()->random();

        $response = $this->deleteJson(route('api.products.destroy', $product->id), [
            'api_token'     => $this->admin->api_token,
        ]);

        $response
            ->assertStatus(200)
            ->assertJson([
                'status' => [
                    'status' => 'OK',
                    'message' => trans('messages.crud', [
                        'resource' => trans_choice('products.product', 1, ['product_count' => '']),
                        'status' => trans('fields.deleted')
                    ]),
                ],
            ]);
        $this->assertDatabaseMissing('products', [
            'id' => $product->id,
        ]);
    }
}
